// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TrafficCrash;
//
//    var trafficCrashPeople = TrafficCrashPeople.FromJson(jsonString);

namespace TrafficCrashPeoples
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TrafficCrashPeople
    {
        private string person_id;
        private string person_type;
        private string rd_no;
        private long vehicle_id;
        private DateTimeOffset crash_date;
        private string sex;
        private string safety_equipment;
        private string airbag_deployed;
        private string ejection;
        private string injury_classification;
        private string driver_action;
        private string driver_vision;
        private string physical_condition;
        private string bac_result;



        [JsonProperty("person_id")]
        public string PersonId { get => person_id; set => person_id = value; }

        [JsonProperty("person_type")]
        public string PersonType { get => person_type; set => person_type = value; }

        [JsonProperty("rd_no")]
        public string RdNo { get => rd_no; set => rd_no = value; }

        [JsonProperty("vehicle_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long VehicleId { get => vehicle_id; set => vehicle_id = value; }

        [JsonProperty("crash_date")]
        public DateTimeOffset CrashDate { get => crash_date; set => crash_date =value; }

        [JsonProperty("sex")]
        public string Sex { get => sex; set => sex =value; }

        [JsonProperty("safety_equipment")]
        public string SafetyEquipment { get => safety_equipment; set => safety_equipment = value; }

        [JsonProperty("airbag_deployed")]
        public string AirbagDeployed { get => airbag_deployed; set => airbag_deployed =value; }

        [JsonProperty("ejection")]
        public string Ejection { get => ejection; set => ejection =value; }

        [JsonProperty("injury_classification")]
        public string InjuryClassification { get => injury_classification; set => injury_classification =value; }

        [JsonProperty("driver_action")]
        public string DriverAction { get => driver_action; set => driver_action =value; }

        [JsonProperty("driver_vision")]
        public string DriverVision { get => driver_vision; set => driver_vision =value; }

        [JsonProperty("physical_condition")]
        public string PhysicalCondition { get => physical_condition; set => physical_condition = value; }

        [JsonProperty("bac_result")]
        public string BacResult { get => bac_result; set => bac_result = value; }
    }

    public partial class TrafficCrashPeople
    {
        public static TrafficCrashPeople[] FromJson(string json) => JsonConvert.DeserializeObject<TrafficCrashPeople[]>(json, TrafficCrashPeoples.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TrafficCrashPeople[] self) => JsonConvert.SerializeObject(self, TrafficCrashPeoples.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
